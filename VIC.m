% Code to create VIC model output used in NCLIM-20051128B, "A Mechanism 
% for Regional Variations in Snowpack Melt Under Rising Temperature" by 
% Evan and Eisenman.
%
% This code needs variables generated by Fig2.m an executable for the
% VIC model, and a parameters file for the VIC model. VIC mode and examples
% can be accessed from https://vic.readthedocs.io/en/master/
%
% Parameter file is from the VIC model homepage, "VIC Model Parameters 
% for Stehekin Basin Sample Classic Driver Setup"


%-- Run the VIC experiments with:
% 1. Read in the SNOTEL-station NARR forcing
% 2. Average the fields over all stations
% 3. For T:
%    - separate hp and lp variability with 31 day running mean filter
%    - fit the lp variability to a sine curve
%    - replace the lp variability with the fitted sine curve
%
% 4. Run VIC for SNOTEL cases of T0, T1 & PHI
%    - use stationed avaeraged & smoothed (3 hr) Precip 
%    - same for Pressure, wind speed, SW 
%    - LWu is calculated to be a fcn of surface air temperature
%
% 5. Run experiments with:
%    - constant rh
%    - constant q
%    - emissivity bias correction
%    - step function for precipitation
clearvars

%--- Constants
L = 2.453e6;
Rv = 461;
ndays = 365;
sig = 5.67e-8;
wd = 360/365;
t = (1:365)';
fin = 'full_data_48.3125_-120.5625';
fout = 'output/fluxes_48.3125_-120.5625.txt';

%--- Read in output generated by Fig2.m

%--- Read in the NARR data interpolated to SNOTEL stations

% Read in T
AIR = narr.air2m;

% estimate the emissivity so that I can calculate LW down sfc
LW = squeeze(mean(narr.dlwrf));
emis = mean(LW(:)./(sig*squeeze(mean(AIR(:))).^4));

% Calculate RH (and later smooth) so this can be held constant
TD = squeeze(mean(narr.dpt2m));
ES = 6.11*exp((L/Rv)*(1/273.15-1./squeeze(mean(AIR(:)))));
VP = 6.11*exp((L/Rv)*(1/273.15-1./(TD)));
RH = VP./ES;
clearvars TD ES VP

% Forcing variables
RH = reshape(smooth(smooth(RH(:))),24,365);

PRES = squeeze(mean(narr.pressfc))/1000; % kPa
PRES = reshape(smooth(smooth(PRES(:))),24,365);

WIND = sqrt(narr.uwnd10m.^2 + narr.vwnd10m.^2);
WIND = squeeze(mean(WIND));
WIND = reshape(smooth(smooth(WIND(:))),24,365);

PREC = squeeze(mean(narr.prate)); % kg/m2/s = mm/s
PREC = PREC*60*60; % mm/hr
PREC = PREC*1.6; % Match observed ltm swe max (~50) and melt date (229)
PREC = reshape(smooth(smooth(PREC(:))),24,365);

SW = squeeze(mean(narr.dswrf));
SW = reshape(smooth(smooth(SW(:))),24,365);

% remove T1 bias correction to be consistent w/realistic runs
T1 = fig2.T1-fig2.dT1; 
T0 = fig2.T0;
PHI = fig2.PHI;
clearvars fig2 narr h d m 

% output to save
dT = linspace(-.5,.5,9);
S = NaN(numel(T0),numel(dT),365); % SWE for four dTs
T = NaN(numel(T0),365); % T for base state


% Save the hp T information
AIR = squeeze(nanmean(AIR));
lp = smooth([AIR(:)' AIR(:)' AIR(:)'],21*24);
lp = lp((365*24+1):(365*24*2));
hp = AIR(:)-lp;
clearvars lp

for i = 1:numel(T0)
    
    disp(num2str(i));
    
    % Calculate modified T
    lp = T0(i) - T1(i)*sind(t*wd+PHI(i));
    Tf = hp + reshape(repmat(lp',24,1),24*365,1);
    T(i,:) = mean(reshape(Tf,24,365))';

    for j = 1:numel(dT)
        AIR = Tf + dT(j) + 273.15;
        ES = 6.11*exp((L/Rv)*(1/273.15-1./AIR));
        VP = RH(:).*ES;
        LW = emis*sig*AIR.^4;
        AIR = AIR - 273.15;
        M = [ PREC(:) AIR(:) SW(:) LW(:) LW(:)*0 PRES(:) VP(:) WIND(:) ];
        dlmwrite(['forcings/' fin],M,'delimiter','\t');
        [~,~] = system(['.vic_classic.exe -g parameters.txt']);
        M = dlmread(fout,'\t',3,0);
        S(i,j,:) = M(:,4)/10;
    end
    
end







